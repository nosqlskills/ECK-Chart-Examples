anchors:
  version: &elasticVersion 8.13.4
  name: &clusterName fleet
  namespace: &namespace fleet
  publicBaseUrl: &publicBaseUrl https://fleet.dev.kibana.YOUR_DOMAIN.com
  environment: &environment dev
  fleetServerName: &fleetServerName fleet-fleet-server
  monitoring: &monitoring
    metrics:
      elasticsearchRefs:
      - name: monitoring
        namespace: observability
    logs:
      elasticsearchRefs:
      - name: monitoring
        namespace: observability

eck-stack:
  enabled: true

  eck-elasticsearch:
    enabled: true
    fullnameOverride: *clusterName
    version: *elasticVersion
    http:
      service:
        spec:
          type: ClusterIP
    monitoring: *monitoring
    podDisruptionBudget: {}
    auth:
      fileRealm:
      - secretName: logstash-writer-user
      - secretName: terraform-user
      roles:
      - secretName: logstash-writer-role # you should load this into k8s a secure way, but the extra-config chart will deploy this for you as a start
      - secretName: terraform-user-role # you should load this into k8s a secure way, but the extra-config chart will deploy this for you as a start
    nodeSets:
    - name: default
      count: 3
      podTemplate:
        spec:
          containers:
          - name: elasticsearch
            resources:
              requests:
                memory: 2Gi
                cpu: '2'
              limits:
                memory: 2Gi
                cpu: '2'
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchLabels:
                    elasticsearch.k8s.elastic.co/cluster-name: *clusterName
                    common.k8s.elastic.co/type: elasticsearch
                topologyKey: topology.kubernetes.io/hostname
      config:
        xpack.monitoring.collection.enabled: true
      volumeClaimTemplates:
      - metadata:
          name: elasticsearch-data # Do not change this name unless you set up a volume mount for the data path.
        spec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: 8Gi
          storageClassName: default

  eck-kibana:
    enabled: true
    fullnameOverride: *clusterName
    spec:
      podTemplate:
        spec:
          containers:
          - name: kibana
            resources:
              requests:
                memory: 2Gi
                cpu: '1'
              limits:
                memory: 2Gi
                cpu: '1'
      version: *elasticVersion
      count: 2
      elasticsearchRef:
        name: *clusterName
      secureSettings:
      - secretName: encryption-secret
      config:
        telemetry.allowChangingOptInStatus: false
        telemetry.optIn: false
        server.publicBaseUrl: *publicBaseUrl
        xpack.fleet.agents.elasticsearch.hosts: ["https://fleet-es-http.default.svc:9200"]
        xpack.fleet.agents.fleet_server.hosts: ["https://fleet-server-agent-http.fleet.svc:8220"]
        xpack.fleet.packages:
          - name: system
            version: latest
          - name: elastic_agent
            version: latest
          - name: fleet_server
            version: latest
        xpack.fleet.agentPolicies:
          - name: Fleet Server on ECK policy
            id: eck-fleet-server
            namespace: default
            monitoring_enabled:
              - logs
              - metrics
            unenroll_timeout: 900
            package_policies:
            - name: fleet_server-1
              id: fleet_server-1
              package:
                name: fleet_server

  eck-fleet-server:
    enabled: true
    fullnameOverride: *fleetServerName
    version: *elasticVersion
    spec:
      kibanaRef:
        name: *clusterName
      elasticsearchRefs:
      - name: *clusterName
      policyID: eck-fleet-server
      deployment:
        replicas: 2
        podTemplate:
          spec:
            serviceAccountName: *fleetServerName
            automountServiceAccountToken: true
            securityContext:
              runAsUser: 0
            containers:
            - name: agent
              resources:
                requests:
                  memory: "1Gi"
                  cpu: '1'
                limits:
                  memory: "1Gi"
                  cpu: '1'
    serviceAccount:
      name: *fleetServerName

    clusterRoleBinding:
      name: *fleetServerName
      subjects:
      - kind: ServiceAccount
        name: *fleetServerName
      roleRef:
        kind: ClusterRole
        name: *fleetServerName
        apiGroup: rbac.authorization.k8s.io
    clusterRole:
      name: *fleetServerName
      serviceAccount:
        name: *fleetServerName

extra-config:
  enabled: true

  environment: *environment
  clusterName: *clusterName